export default {
    en: {
        home: {
            id: 'ID',
            dashboard: 'Dashboard',
            relationships: 'Relationships',
            accessManagement: 'Access Management',
            apiKeys: 'API Keys',
            apiKeysDescription: 'Generate and Manage API Keys',
            domainSelect: 'Select Domain',
            selectContainer: 'Select Container',
            taxonomy: 'Ontology',
            metatypes: 'Metatypes',
            metatypesDescription: 'Modify Metatypes and Metatype Keys',
            metatypeRelationships: 'Relationship Types',
            metatypeRelationshipsDescription: 'Modify Relationship Types',
            metatypeRelationshipPairs: 'Relationships',
            metatypeRelationshipPairsDescription: 'Modify Relationships',
            ontologyUpdate: 'Update Ontology',
            ontologyUpdateDescription: 'Update via Ontology File',
            import: 'Import',
            imported: 'Data Imported',
            data: 'Data',
            dataQuery: 'Data Query',
            dataQueryDescription: 'Query Processed Data',
            dataSources: 'Data Sources',
            dataSourcesDescription: 'Configure Data Import Sources',
            dataExplorer: 'Explorer',
            dataExplorerDescription: 'Interactive Data Explorer',
            dataMapping: 'Type Mapping',
            dataMappingDescription: 'Manage Data Mappings',
            dataExport: 'Graph Export',
            dataExportDescription: 'Manage Data Export',
            dataTest: 'Test Data',
            dataTestDescription: 'Create and Manage Datasets',
            settings: 'Settings',
            settingsDescription: 'Application Level Settings',
            dataImports: 'Import Data',
            dataImportsDescription: 'Manage Imported Data',
            containerAdministration: 'Container Administration',
            containerUsers: 'Container Users',
            containerUsersDescription: 'Manage Container Users',
            administration: 'App Administration',
            users: 'Users',
            usersDescription: 'Manage All Users',
            containers: 'Containers',
            containersDescription: 'Manage Containers',
            language: 'Language',
            accessKeys: 'Access Keys',
            accessKeysDescription: 'Manage API Access Keys',
            logout: 'Logout',
            cancel: 'Cancel',
            save: 'Save',
            create: 'Create',
            changeContainer: 'Change Container',
            welcomeCardTitle: 'Welcome to Deep Lynx!',
            welcomeCardText:
                'Deep Lynx is a unique data warehouse designed to provide easy collaboration on large projects. Deep Lynx allows users to define an ontology and then store data under it. Find more information on our wiki below.',
            welcomeCardLinkText: 'Wiki',
            welcomeCardLink: 'https://gitlab.software.inl.gov/b650/Deep-Lynx/-/wikis/home',
            ontologyCardTitle: 'Ontology',
            ontologyCardText:
                'An ontology is an essential part of Deep Lynx. It is a collection of classes, their properties, and their relationships to other classes. Learn how to manage your ontology in our wiki, or experiment as you will.',
            ontologyCardLinkText1: 'Loading an Ontology',
            ontologyCardLinkText2: 'Manage Ontology',
            ontologyCardLink1: 'https://gitlab.software.inl.gov/b650/Deep-Lynx/-/wikis/Creating-an-Ontology',
            setupDataSourceCardTitle: 'Data Sources',
            setupDataSourceCardText:
                'Data Sources allow Deep Lynx to retrieve or be sent data from outside sources. Managing Data Sources is essential to successful usage of Deep Lynx. Manage your Data Sources by clicking below.',
            setupDataSourceCardLinkText: 'Manage Data Sources',
            inviteUserCardTitle: 'Invite Users to Your Container',
            inviteUserCardText: "Don't go alone! Invite others to help manage your ontology and data.",
            inviteUserCardLinkText: 'Manage Users',
            ontologyVersioning: 'Ontology Versioning',
            ontologyVersioningDescription: 'Manage Version and Changelists',
        },
        apiKeys: {
            title: 'Current API Keys',
            key: 'Key',
            actions: 'Actions',
        },
        deleteApiKey: {
            deleteTitle: 'Permanently Delete API Key/Secret Pair',
            deleteWarning:
                'Deleting this key will cause any integration which uses it to no longer be able to authenticate with Deep Lynx. Only delete a key that you know is not in use or has been compromised. Deleting a key/pair cannot be undone.',
            cancel: 'Cancel',
            delete: 'Delete',
        },
        dataQuery: {
            dataQuery: 'Data Query',
            results: 'Results',
            queryData: 'Query Processed Data',
            list: 'List',
            json: 'JSON',
            graph: 'Graph',
            nodeInformation: 'Node Information',
            selectNode: 'Select Node for more information',
            noResults: 'No Results',
            id: 'ID',
            metatypeName: 'Metatype',
            viewProperties: 'Properties',
            files: 'Files',
            copyID: 'Click to Copy ',
            createdAt: 'Created At',
        },
        nodeFiles: {
            id: 'ID',
            fileName: 'File Name',
            fileSize: 'Size',
            actions: 'Actions',
            copyID: 'Click to Copy ID',
            attachedFiles: 'Attached Files',
            addFile: 'Add File',
            selectFile: 'Select File to Upload',
        },
        ifcViewer: {
            rawProperties: 'Raw Properties',
            name: 'Name',
            close: 'Close',
            description: 'Description',
            loadWarning:
                'Loading an IFC file into the browser can be a resource and time consuming process. If the file is large, or your connection to Deep Lynx slow, it may take several minutes for the file to load and render. Please be patient.',
            loadModel: 'Load IFC File',
            resetModel: 'Reset IFC File',
            Model: 'Model',
            Properties: 'Properties',
        },
        exportMapping: {
            title: 'Export Type Mappings',
            export: 'Export',
            exportAll: 'Export All Mappings',
            cancel: 'Cancel',
            exportToFile: 'Export to File',
            exportToDataSource: 'Export to Data Source',
            selectContainer: 'Select Container',
            selectDataSource: 'Select Data Source',
        },
        createApiKey: {
            formTitle: 'Generate New API Key/Secret',
            description:
                'The API Key/Secret pair you generate here will have all the same permissions as your user. It is NOT tied to this current container and users of this key/secret pair will have access to all containers and data you have permission for. Please use these keys cautiously.',
            successfullyCreated: 'WRITE DOWN YOUR SECRET - this is the only time you will be able to see it.',
            key: 'Key',
            secret: 'Secret',
            create: 'Generate',
            cancel: 'Cancel',
            createApiKey: 'Generate API Key',
        },
        importMapping: {
            importMappings: 'Import Type Mappings',
            title: 'Import Type Mappings From File',
            cancel: 'Cancel',
            importFromFile: 'Import Mappings From File',
        },
        metatypes: {
            restoreMetatype: 'Restore removed Metatype',
            removeMetatype: 'Remove Metatype',
            created: 'Created',
            edited: 'Edited',
            removed: 'Removed',
            legendNote: "If you edit a Metatype's name, it may appear as if you created the metatype as we can no longer match it to the original ontology",
            metatypes: 'Metatypes',
            search: 'Search',
            create: 'Create',
            formTitle: 'New Metatype',
            name: 'Name',
            nameRequired: 'name required',
            description: 'Description',
            descriptionRequired: 'description required',
            actions: 'Actions',
            searchName: 'Search Name',
            searchDescription: 'Search Description',
            metatypeSuccessfullyCreated: 'Metatype created successfully',
            id: 'ID',
            copyID: 'Click to Copy ',
            listCreated: 'Created',
            listEdited: 'Edited',
            listDeleted: 'Deleted',
        },
        viewMetatype: {
            editMetatype: 'Edit Metatype',
            edit: 'Edit',
            name: 'Name',
            nameRequired: 'name required',
            description: 'Description',
            descriptionRequired: 'description required',
            close: 'Close',
            errorUpdatingAPI: 'Error communicating with Deep Lynx:',
            keys: 'Properties',
            actions: 'Actions',
            keyName: 'Name',
            keyDescription: 'Description',
            keyType: 'Data Type',
            keyActions: 'Actions',
            requiredField: 'Required Field',
            propertyName: 'Property Name',
            dataType: 'Data Type',
            defaultValue: 'Default Value',
        },
        viewMetatypeKey: {
            close: 'Close',
        },
        editMetatype: {
            editMetatype: 'Edit Metatype',
            edit: 'Edit',
            name: 'Name',
            nameRequired: 'name required',
            description: 'Description',
            descriptionRequired: 'description required',
            save: 'Save',
            cancel: 'Cancel',
            errorUpdatingAPI: 'Error communicating with Deep Lynx:',
            keys: 'Properties',
            actions: 'Actions',
            keyName: 'Name',
            keyDescription: 'Description',
            keyType: 'Data Type',
            keyActions: 'Actions',
            requiredField: 'Required Field',
        },
        editMetatypeRelationship: {
            editMetatypeRelationship: 'Edit Metatype Relationship',
            edit: 'Edit',
            name: 'Name',
            nameRequired: 'name required',
            descriptionRequired: 'description required',
            description: 'Description',
            save: 'Save',
            cancel: 'Cancel',
            errorUpdatingAPI: 'Error communicating with Deep Lynx:',
            keys: 'Properties',
            actions: 'Actions',
            keyName: 'Name',
            keyDescription: 'Description',
            keyType: 'Data Type',
            keyActions: 'Actions',
            requiredField: 'Required Field',
        },
        editMetatypeKey: {
            edit: 'Edit',
            name: 'Name',
            nameRequired: 'name required',
            propertyNameRequired: 'property name required',
            dataTypeRequired: 'data type required',
            descriptionRequired: 'description required',
            propertyName: 'Property Name',
            propertyNameHelp: 'JSON compatible property name',
            description: 'Description',
            dataType: 'Data Type',
            required: 'Required',
            requiredSmall: 'required',
            validation: 'Validation',
            regex: 'Regular Expression',
            regexHelp: 'Enter a valid regular expression for matching against future value',
            max: 'Max',
            maxHelp: 'Maximum matches',
            min: 'Min',
            minHelp: 'Minimum matches',
            defaultValue: 'Default Value',
            options: 'Options',
            save: 'Save',
            cancel: 'Cancel',
            errorUpdatingAPI: 'Error communicating with Deep Lynx:',
            requiredField: 'Required Field',
        },
        createMetatypeKey: {
            newKey: 'New Property',
            name: 'Name',
            nameRequired: 'name required',
            propertyNameRequired: 'property name required',
            dataTypeRequired: 'data type required',
            descriptionRequired: 'description required',
            propertyName: 'Property Name',
            propertyNameHelp: 'JSON compatible property name',
            description: 'Description',
            dataType: 'Data Type',
            required: 'Required',
            requiredSmall: 'required',
            validation: 'Validation',
            regex: 'Regular Expression',
            regexHelp: 'Enter a valid regular expression for matching against future value',
            max: 'Max',
            maxHelp: 'Maximum matches',
            min: 'Min',
            minHelp: 'Minimum matches',
            defaultValue: 'Default Value',
            options: 'Options',
            create: 'Create',
            cancel: 'Cancel',
            errorUpdatingAPI: 'Error communicating with Deep Lynx:',
            requiredField: 'Required Field',
        },
        editMetatypeRelationshipKey: {
            edit: 'Edit',
            name: 'Name',
            nameRequired: 'name required',
            propertyNameRequired: 'property name required',
            dataTypeRequired: 'data type required',
            descriptionRequired: 'description required',
            propertyName: 'Property Name',
            propertyNameHelp: 'JSON compatible property name',
            description: 'Description',
            dataType: 'Data Type',
            required: 'Required',
            requiredSmall: 'required',
            validation: 'Validation',
            regex: 'Regular Expression',
            regexHelp: 'Enter a valid regular expression for matching against future value',
            max: 'Max',
            maxHelp: 'Maximum matches',
            min: 'Min',
            minHelp: 'Minimum matches',
            defaultValue: 'Default Value',
            options: 'Options',
            save: 'Save',
            cancel: 'Cancel',
            errorUpdatingAPI: 'Error communicating with Deep Lynx:',
            requiredField: 'Required Field',
        },
        createMetatypeRelationshipKey: {
            newKey: 'New Property',
            name: 'Name',
            nameRequired: 'name required',
            propertyNameRequired: 'property name required',
            dataTypeRequired: 'data type required',
            descriptionRequired: 'description required',
            propertyName: 'Property Name',
            propertyNameHelp: 'JSON compatible property name',
            description: 'Description',
            dataType: 'Data Type',
            required: 'Required',
            requiredSmall: 'required',
            validation: 'Validation',
            regex: 'Regular Expression',
            regexHelp: 'Enter a valid regular expression for matching against future value',
            max: 'Max',
            maxHelp: 'Maximum matches',
            min: 'Min',
            minHelp: 'Minimum matches',
            defaultValue: 'Default Value',
            options: 'Options',
            create: 'Create',
            cancel: 'Cancel',
            errorUpdatingAPI: 'Error communicating with Deep Lynx:',
            requiredField: 'Required Field',
        },
        createMetatype: {
            createMetatype: 'Create Metatype',
            newMetatype: 'New Metatype',
            name: 'Name',
            nameRequired: 'name required',
            description: 'Description',
            descriptionRequired: 'description required',
            save: 'Save',
            cancel: 'Cancel',
            errorCreatingAPI: 'Error communicating with Deep Lynx:',
            requiredField: 'Required Field',
        },
        createMetatypeRelationship: {
            createMetatypeRelationship: 'Create Metatype Relationship',
            newMetatypeRelationship: 'New Metatype Relationship',
            name: 'Name',
            nameRequired: 'name required',
            description: 'Description',
            descriptionRequired: 'description required',
            save: 'Save',
            cancel: 'Cancel',
            errorCreatingAPI: 'Error communicating with Deep Lynx:',
            requiredField: 'Required Field',
        },
        createMetatypeRelationshipPair: {
            createMetatypeRelationshipPair: 'Create Metatype Relationship Pair',
            formTitle: 'New Metatype Relationship Pair',
            name: 'Name',
            description: 'Description',
            nameRequired: 'name required',
            descriptionRequired: 'description required',
            originRequired: 'origin metatype required',
            relationshipRequired: 'relationship required',
            requiredSmall: 'required',
            originMetatype: 'Origin Metatype',
            relationship: 'Relationship',
            destinationMetatype: 'Destination Metatype',
            relationshipType: 'RelationshipType',
            cancel: 'Cancel',
            save: 'Save',
            relationshipTypeRequired: 'relationship required',
            destinationRequired: 'destination metatype required',
            errorCreatingAPI: 'Error communicating with Deep Lynx:',
            requiredField: 'Required Field',
        },
        editMetatypeRelationshipPair: {
            editMetatypeRelationshipPair: 'Edit Metatype Relationship Pair',
            formTitle: 'Edit Metatype Relationship Pair',
            name: 'Name',
            nameRequired: 'name required',
            descriptionRequired: 'description required',
            description: 'Description',
            requiredSmall: 'required',
            originMetatype: 'Origin Metatype',
            relationship: 'Relationship',
            destinationMetatype: 'Destination Metatype',
            relationshipType: 'RelationshipType',
            cancel: 'Cancel',
            save: 'Save',
            relationshipTypeRequired: 'relationship required',
            originRequired: 'origin metatype required',
            destinationRequired: 'destination metatype required',
            relationshipRequired: 'relationship required',
            errorEditingAPI: 'Error communicating with Deep Lynx:',
            requiredField: 'Required Field',
        },
        metatypeRelationships: {
            relationshipSuccessfullyCreated: 'Metatype Relationship created successfully',
            metatypeRelationships: 'Metatype Relationships',
            formTitle: 'New Relationship',
            newRelationship: 'New Relationship',
            name: 'Name',
            description: 'Description',
            actions: 'Actions',
            searchName: 'Search Name',
            searchDescription: 'Search Description',
            id: 'ID',
            copyID: 'Click to Copy ',
        },
        metatypeRelationshipPairs: {
            formTitle: 'New Relationship Pair',
            name: 'Name',
            description: 'Description',
            actions: 'Actions',
            searchName: 'Search Name',
            searchDescription: 'Search Description',
            originMetatype: 'Search Origin Metatype',
            destinationMetatype: 'Search Destination Metatype',
            relationship: 'Search Relationship',
            pairSuccessfullyCreated: 'Successfully Created Metatype Relationship Pair',
            id: 'ID',
            copyID: 'Click to Copy ',
        },
        ontologyUpdate: {
            formTitle: 'Update Taxonomy via Ontology File',
        },
        dataSources: {
            copyID: 'Copy ID to clipboard',
            id: 'ID',
            create: 'Create',
            formTitle: 'New Data Source',
            title: 'Data Sources',
            name: 'Name',
            adapterType: 'Adapter Type',
            active: 'Active',
            actions: 'Actions',
            archived: 'archived',
        },
        createDataSource: {
            aveva: 'Aveva',
            jazz: 'Jazz',
            http: 'HTTP Poller',
            standard: 'Standard',
            newDataSource: 'New Data Source',
            formTitle: 'Create New Data Source',
            name: 'Name',
            sourceType: 'Select Data Source Type',
            dataType: 'Return Data Type',
            authMethod: 'Authentication Method',
            pollInterval: 'Poll Interval (in minutes)',
            create: 'Create',
            cancel: 'Cancel',
            enable: 'Enable',
            username: 'Username',
            password: 'Password',
            token: 'Authentication Token',
            projectName: 'Project Name',
            secure: 'Use HTTPS',
            ignoreDBs: 'Ignored Database Types',
            ignoreElements: 'Ignored Element Types',
            recordLimit: 'Records Per Call Limit',
            artifactTypes: 'Artifact Types for Retrieval',
            endpoint: 'HTTP(S) Endpoint',
            typeToAdd: 'Type and hit "Enter" to add entry',
            ifcElementTypes: 'Element Types for IFC Generation',
            ifcSettingsTitle: 'IFC Settings',
            stopNodes: 'Stop Nodes',
            valueNodes: 'Value Nodes',
            dangerZone: 'Advanced Settings',
            dangerZoneWarning:
                'These settings are either experimental or highly technically and could adversely affect the operation of your Data Source. Modify these settings only if you know what you are doing',
            ifcSettings: {
                format: 'IFC Format',
                dataLevel: 'Data Level',
                logLevel: 'Log Level',
                arcTolerance: 'Arc Tolerance',
                componentLevel: 'Component Level',
                tube: 'Tube',
                cl: 'CL',
                insuTranslucency: 'Insular Translucency',
                obstTranslucency: 'Obstruction Translucency',
                root: 'Root',
                pipe: 'Pipe',
                nozzle: 'Nozzle',
                structure: 'Structure',
                cable: 'Cable',
            },
        },
        deleteDataSource: {
            deleteDataSource: 'Delete Data Source',
            deleteTitle: 'Delete Data Source Permanently',
            archiveTitle: 'Archive Data Source',
            deleteWarning:
                'Deleting a Data Source means it will be unrecoverable to even administrative users. Only delete Data Sources you know are no longer needed or that were created in error. When in doubt, please archive your Data Source instead. Archiving a Data Source maintains all data imported and all type mappings created with associations to the source. It is generally the preferred action.',
            forceDeleteWarning:
                'ATTENTION: This Data Source has data, type mappings, or pending imports associated with it. Deleting this Data Source may adversely affect your container - force deletion at your own risk, this cannot be reversed.',
            archiveWarning:
                'Archiving a Data Source will stop all data collection that it might currently be performing. Data collected by this source and mappings created in response to that data will not be affected.',
            cancel: 'Cancel',
            archive: 'Archive',
            delete: 'Delete',
            forceDelete: 'Force Delete',
            in: 'in',
            withData: 'Delete all data ingested by Data Source',
            withDataWarning:
                'Data may have already been ingested for this Data Source. We will remove this data by default so as to avoid "orphaned" data, or data that we cannot trace back to an individual Data Source. If you would like to keep this data and orphan it, please uncheck the box below.',
        },
        deleteDataImport: {
            deleteTitle: 'Delete Import',
            deleteWarning:
                'Deleting an Import might have unintended consequences, especially if you are deleting data generated from that import. This action cannot be undone, even by an admin',
            cancel: 'Cancel',
            delete: 'Delete',
            in: 'in',
            withData: 'Delete All Data Generated From Import',
        },
        deleteTransformation: {
            deleteTransformation: 'Delete Transformation',
            deleteTitle: 'Delete Transformation Permanently',
            archiveTitle: 'Archive Transformation',
            deleteWarning:
                'Deleting a Transformation means it will be unrecoverable to even administrative users. Only delete transformations you know are no longer needed or that were created in error. When in doubt, please archive your Transformation instead. Archiving a Transformation will maintain all data created from it, while stopping all new data generation. It is generally the preferred action.',
            forceDeleteWarning:
                'ATTENTION: This Transformation has data associated with it. Deleting this Transformation may adversely affect your container - force deletion at your own risk, this cannot be reversed.',
            archiveWarning:
                'Archiving a Transformation will not affect any data that has been generated using it. No future data will be generated using this Transformation, and you will not be able to edit it after archiving.',
            cancel: 'Cancel',
            archive: 'Archive',
            delete: 'Delete',
            forceDelete: 'Force Delete',
            in: 'in',
            withData: 'Delete all data associated with Transformation',
            withDataWarning:
                'Data may have already been generated using this Transformation. We will remove this data by default so as to avoid "orphaned" data, or data that we cannot trace back to an individual Transformation. If you would like to keep this data and orphan it, please uncheck the box below.',
        },
        dataMapping: {
            parentInformation: 'Parent Information',
            childInformation: 'Child Information',
            dataSourceRelationshipHelp: 'Choose the Data Source the parent and child record belong to.',
            metatypeRelationshipHelp: 'Choose the Metatype that the parent and child records belong to.',
            mapping: 'Mapping',
            configuration: 'Configuration',
            onConversionError: 'On Conversion Errors',
            onKeyExtractionError: 'On Key Extraction Errors',
            fail: 'Fail All Keys',
            failOnRequired: 'Fail Required Keys Only',
            ignore: 'Ignore',
            autopopulate: 'Autopopulate Keys',
            viewArchivedTransformation: 'View Archived Transformation',
            importedSuccessfully: 'Import Status',
            mappingsImported: 'Mappings Successfully Imported',
            record: 'Record',
            relationship: 'Relationship',
            typeMapping: 'Type Mapping',
            resultingTypeName: 'Resulting Metatype/Metatype Relationship',
            applicableToCurrentData: 'Applicable To Sample',
            metatypePropertyMapping: 'Property Mapping',
            expression: 'Expression',
            actions: 'Actions',
            newTransformationButton: 'Create New Transformation',
            editTransformation: 'Edit Transformation',
            and: 'AND',
            or: 'OR',
            subexpressions: 'Subexpressions',
            subexpressionsHelp:
                'Subexpressions allow for more complicated conditions to be created by enabling the use of AND/OR expressions when applying conditions.',
            chooseRelationship: 'Choose Relationship',
            createNewTransformation: 'Create New Transformation',
            optional: 'optional',
            rootArray: 'Root Array',
            rootArrayHelp: 'Selecting a root array means this transformation will be applied for every object contained in the selected root array.',
            conditions: 'Conditions',
            conditionsHelp: 'Your transformation will only be applied to the data when these conditions are met.',
            key: 'Key',
            operator: 'Operator',
            value: 'Value',
            addCondition: 'Save Condition',
            keyHelp: 'Key on original payload to which the operator will be applied',
            operatorHelp: 'Operators denote a logical operation',
            uniqueIdentifierHelp: 'The payload key which denotes an ID or otherwise unique identifier for the created node/edge',
            onConflictHelp: 'What Deep Lynx should do if the result of the transformation creates a node/edge that already exists in the system.',
            mapPayloadKey: 'type or select payload key',
            required: 'required',
            create: 'Create',
            edit: 'Save',
            reset: 'Reset',
            samplePayloadHelp: 'This is an example of the data this transformation will be applied to.',
            constantValue: 'constant value',
            selectDataSource: 'Select Data Source',
            currentMappings: 'Current Mappings',
            needsTransformations: 'Needs Transformations',
            resultingDataType: 'Resulting Data Type',
            chooseMetatype: 'Choose Metatype',
            typeToSearch: 'Type to Search Available Metatypes',
            typeToSearchRelationships: 'Type to Search Available Metatype Relationship Pairs',
            typeKey: 'Type Key',
            uniqueIdentifierKey: 'Unique Identifier Key',
            propertyMapping: 'Property Mapping',
            payloadKey: "Payload's Key",
            samplePayload: 'Sample Payload',
            metatype: 'Metatype',
            onConflict: 'On Conflict',
            metatypeRelationship: 'Relationship',
            mix: 'Metatype & Relationship',
            originKey: 'Parent ID Key',
            destinationKey: 'Child ID Key',
            originDestinationKeyHelp:
                'By selecting a Parent Key you determine that this record is a child of the value of that Parent Key, opposite is true of selecting a Child Key.',
            active: 'Enable Type Mapping',
            transformationsTableTitle: 'Transformations',
            typeMappingHelp:
                'The Type Mapping record and Transformation records are the workhorses of the type mapping system. A Type Mapping contains information as to which container and data source the type mapping belongs, a shape hash which is used to determine which objects to apply the type mapping to, and information denoting status. A Transformation belongs to a Type Mapping, and a Type Mapping can have as many Transformations as it wants. These are the individual actions that Deep Lynx should perform on an object matching a certain Type Mapping. Transformations are applied to an object to produce either a node or edge record, ready to be inserted into the Deep Lynx database.',
            currentDataSet: 'Current Data Set',
            chooseResultingMetatype: 'Choose Resulting Metatype',
            chooseResultingRelationship: 'Choose Resulting Metatype Relationship Pair',
            typeToSearchRelationship: 'Type to Search Available Metatype Relationship Pairs',
            enabled: 'Enabled',
            createdAt: 'Created At',
            resultingTypes: 'Resulting Metatype/Metatype Relationship',
            requiredField: 'Required Field',
            dateFormatString: 'Date Format String(blank for ISO)',
            dateFormatStringHelp: 'Formatting your date/time',
        },
        deleteTypeMapping: {
            deleteTypeMapping: 'Delete Type Mapping',
            deleteTitle: 'Delete Data Type Mapping',
            deleteWarning:
                'Deleting this mapping will permanently remove it from the system - even administrators cannot undo this. A reminder that mappings are auto-generated by Data Sources as they see unique data structures - this mapping may be generated again automatically after deletion.',
            unableToDelete:
                'This mapping has transformations attached to it! You will not be able to delete this mapping until all transformations are removed.',
            cancel: 'Cancel',
            delete: 'Delete',
            in: 'in',
        },
        typeTransformation: {
            newTransformationButton: 'Create New Transformation',
            formTitle: 'New Transformation',
            currentDataSet: 'Current Data Set',
        },
        dataTestCreation: {
            nodeTableTitle: 'Nodes',
            edgeTableTitle: 'Edges',
            metatype: 'Metatype',
            name: 'Name',
            properties: 'Properties',
            originNode: 'Origin Node',
            destinationNode: 'Destination Node',
            relationship: 'Relationship',
            relationshipType: 'Relationship Type',
            createdAt: 'Created At',
            id: 'ID',
            viewDeleteData: 'Actions',
            successfullyDeleted: 'Data Successfully Deleted',
        },
        createNode: {
            createNode: 'Create Node',
            formTitle: 'Create Node',
            metatype: 'Metatype',
            metatypeRequired: 'metatype required',
            properties: 'Properties',
            save: 'Save',
            cancel: 'Cancel',
            errorCreatingAPI: 'Error communicating with Deep Lynx:',
            requiredField: 'Required Field',
        },
        editNode: {
            formTitle: 'Properties',
            keyName: 'Name',
            value: 'Value',
            type: 'Type',
            editNode: 'Edit Node',
            edit: 'Edit',
            name: 'Name',
            nameRequired: 'name required',
            description: 'Description',
            descriptionRequired: 'description required',
            save: 'Save',
            cancel: 'Cancel',
            errorUpdatingAPI: 'Error communicating with Deep Lynx:',
            keys: 'Properties',
            actions: 'Actions',
            keyDescription: 'Description',
            keyType: 'Data Type',
            keyActions: 'Actions',
            requiredField: 'Required Field',
        },
        createEdge: {
            createEdge: 'Create Edge',
            formTitle: 'Create Edge',
            originNode: 'Origin Node',
            originNodeRequired: 'origin node required',
            destinationNode: 'Destination Node',
            destinationNodeRequired: 'destination node required',
            relationship: 'Relationship',
            relationshipRequired: 'relationship required',
            save: 'Save',
            cancel: 'Cancel',
            errorCreatingAPI: 'Error communicating with Deep Lynx:',
            requiredField: 'Required Field',
        },
        login: {
            username: 'Email',
            password: 'Password',
            login: 'Login',
            windows: 'Login with Windows',
            deepLynx: 'Login with Deep Lynx',
            needAccount: 'Need an Account?',
            forgotPassword: 'Forgot Password?',
        },
        register: {
            title: 'Register for Account',
            name: 'Name',
            email: 'Email',
            password: 'Password',
            confirmPassword: 'Confirm Password',
            submit: 'Register',
            home: 'Return to Login',
            successful:
                'User created successfully. An email will be sent to validate your account. Please return to the Login screen to begin using Deep Lynx.',
        },
        resetPassword: {
            title: 'Reset Password',
            email: 'Email',
            emailConfirm: 'Confirm Email',
            submit: 'Submit',
            validEmail: 'Email must be valid',
            successful: 'Successful: If a user with this email exists they will receive a password containing instructions on how to reset their password.',
            home: 'Return to Login',
            password: 'Enter New Password',
            confirmPassword: 'Confirm New Password',
        },
        ontologyToolbar: {
            viewMode: 'View Mode',
            editMode: 'Edit Mode',
            activeChangelist: 'Active Changelist',
            current: 'current',
            ontologyVersion: 'Ontology Version',
        },
        createChangelist: {
            formTitle: 'Create New Changelist',
            name: 'Name',
            description: 'Description',
            cancel: 'Cancel',
            save: 'Save',
            newChangelistButton: 'New Changelist',
            creationNote:
                'Changelist creation may take upwards of 5 minutes to complete. Your changelist will have a status of "generating" until it is ready to be edited. Please be patient.',
        },
        ontologyVersioning: {
            ontologyVersions: 'Ontology Versions',
            changelists: 'Changelists',
            id: 'ID',
            name: 'Name',
            description: 'Description',
            actions: 'Actions',
            status: 'Status',
            publishedAt: 'Published At',
            approveChangelist: 'Approve Changelist',
            deleteChangelist: 'Delete Changelist',
            sendApproval: 'Send Changelist for Approval',
            applyChangelist: 'Apply Changelist',
            revokeApproval: 'Reject Changelist',
            rollbackOntology: 'Rollback to this Ontology Version (creates changelist for further approval)',
        },
        containers: {
            or: 'Or',
            title: 'Manage Containers',
            name: 'Name',
            description: 'Description',
            newContainerButton: 'Create New Container',
            actions: 'Actions',
            formTitle: 'Create New Container',
            owlUrlHelp: 'A URL to an .owl file - used to auto-populate the ontology',
            owlFileHelp: 'An .owl file - used to auto-populate the ontology',
            urlOwlFile: 'URL to .owl File',
            optional: 'optional',
            owlFile: '.owl File',
            dataVersioningEnabled: 'Data Versioning Enabled',
            dataVersioningHelp:
                'Toggle whether or not this container will maintain historical versions of all data inserted or modified into it. Note: this does not apply to the ontology portion of the container, only the data.',
        },
        containerSelect: {
            container: 'Container',
            or: 'or',
            continue: 'Continue',
            choose: 'Please choose an initial container to get started. A container is like a project, and it consists of an ontology and the data stored under that ontology',
            logout: 'Logout',
            acceptInvite: 'Accept Invite',
            acceptInviteLong: 'Accept Invitation to a Container',
            needHelp: 'Need Help? Learn more on our',
            wiki: 'Wiki.',
            wikiLink: 'https://gitlab.software.inl.gov/b650/Deep-Lynx/-/wikis/home',
        },
        users: {
            title: 'Manage Users',
            newUser: 'New User',
            name: 'Name',
            email: 'Email',
            admin: 'Admin',
            actions: 'Actions',
            password: 'Password',
            confirmPassword: 'Confirm Password',
            users: 'Users',
            containers: 'Containers',
            assignContainerRoles: 'Container Roles',
            editUserTitle: 'Edit User',
            assignRole: 'Assign Role',
            role: 'Role',
            cancel: 'Cancel',
        },
        containerUsers: {
            title: 'Manage Users',
            newUser: 'New User',
            name: 'Name',
            email: 'Email',
            admin: 'Admin',
            actions: 'Actions',
            password: 'Password',
            confirmPassword: 'Confirm Password',
            users: 'Users',
            containers: 'Containers',
            assignContainerRoles: 'Container Roles',
            editUserTitle: 'Edit User',
            assignRole: 'Assign Role',
            role: 'Role',
            cancel: 'Cancel',
        },
        settings: {
            accessKeyDescription: 'Generate and remove API access keys for your user.',
            key: 'Key',
            accessKeyTitle: 'Manage Access Keys',
            generateKey: 'Generate New Key',
            accessKeyFormTitle: 'Generate New Key',
            actions: 'Actions',
        },
        dataImports: {
            tableTitle: 'Imports',
            dataView: 'Import Data',
            importTableTitle: 'Import Data',
            viewData: 'Raw Data',
            editTypeMapping: 'Type Mapping',
            createdAt: 'Created At',
            percentageProcessed: '% Processed',
            status: 'Status',
            message: 'Message',
            viewEditData: 'View/Edit',
            id: 'ID',
            processedAt: 'Processed At',
            errors: 'Errors',
            typeMapping: 'Type Mapping',
            viewDeleteData: 'View/Delete',
            successfullyDeleted: 'Data Successfully Deleted',
        },
        containerInvite: {
            button: 'Invite User to Container',
            formTitle: 'Invite User to Container',
            email: 'Email of user to invite',
            cancel: 'Cancel',
            sendInvite: 'Send Invite',
            acceptInvite: 'Accept Invitation',
            acceptTitle: 'Accept Invitation to Join Container',
            acceptDescription: 'By clicking the button below you are accepting an invitation to be a part of the container ',
            loginToAccept: 'Login to Accept Invitation',
            inviteSuccessful: 'Invitation Accepted Successfully',
            inviteSuccessfulDescription: 'You may now choose this container from the container selection screen',
            containerSelect: 'Container Selection',
        },
        exports: {
            title: 'Export Container Data',
            destinationType: 'Destination Type',
            adapter: 'Adapter',
            status: 'Status',
            statusMessage: 'Message',
            actions: 'Actions',
            warningStopTitle: 'Stop Export',
            warningStopBody:
                "Deep Lynx will attempt to stop this currently processing export. However, this action is not instant and you may see some records exported even after you've stopped the process. Give the action 5-10 minutes to fully stop before either contacting support or attempting to stop the process again.",
            ok: 'Ok',
            warningResetTitle: 'Reset Export',
            warningResetBody:
                'This will completely reset this export, meaning that all data currently in the container will be re-queued up for export. This DOES NOT ERASE ANY DATA THAT MIGHT HAVE ALREADY BEEN EXPORTED. Please insure that your export destination is empty prior to restarting the export.',
            cancel: 'Cancel',
            understandReset: 'I Understand, Reset Export',
            warningDeleteTitle: 'Delete Export',
            warningDeleteBody:
                'Deleting an Export WILL NOT DELETE ANY DATA ON EXPORT TARGET. Insure that your destination also removes any data that might have been exported before this export request is deleted. This will also have no affect on current data stored in this container',
            understandDelete: 'I Understand, Delete Export',
            createdAt: 'Created At',
        },
        createExport: {
            createExport: 'Create Export',
            formTitle: 'Create New Export',
            destinationType: 'Destination Type',
            destinationHelp: 'The type of database or data source the data will be exported to.',
            adapter: 'Adapter',
            adapterHelp: 'The communication protocol Deep Lynx will use to export the data to the destination.',
            gremlinConfiguration: 'Gremlin Adapter Configuration',
            traversalSource: 'Traversal Source',
            traversalSourceHelp: "Name of the primary traversal source to export to, typically 'g'",
            user: 'User',
            userHelp: 'Gremlin user or as specified by your destination',
            key: 'Key/Password',
            keyHelp: "User's password or access key as specified by your destination",
            endpoint: 'Endpoint',
            endpointHelp: 'The HTTP/S endpoint of your Gremlin enabled destination.',
            port: 'Port',
            portHelp: 'Port on which to contact the Gremlin enabled destination.',
            path: 'Path',
            pathHelp: 'Optional path to include after the root endpoint.',
            writes: 'Writes-per-second',
            writesHelp: 'This determines how many times Deep Lynx can write to the Gremlin enabled destination each second.',
            cancel: 'Cancel',
            create: 'Create',
            requiredField: 'Required Field',
        },
        queryBuilder: {
            recordLimit: 'Limit',
            previousQueries: 'Previous Queries',
            queryBuilder: 'Query Builder',
            rawEditor: 'Raw Query Editor',
            dataSource: 'Data Source',
            DataSourceFilter: 'Filter by Data Source',
            clickToAdd: 'Click to add filter',
            clickToAddProperty: 'Click to add Property filter',
            runQuery: 'Run Query',
            selectFilterType: 'Select Filter Type',
            MetatypeFilter: 'Filter by Metatype',
            IDFilter: 'Filter by ID(s)',
            OriginalIDFilter: 'Filter by Original ID',
            metatype: 'Metatype',
            typeToAdd: 'Type and hit Enter to add',
            originalDataID: 'Original Data ID',
            selectOperator: 'Select Operator',
            deepLynxID: 'Deep Lynx ID',
            resubmitQuery: 'Re-Run Query',
            resetQuery: 'Reset Query',
            newQuery: 'New Query',
            PropertyFilter: 'Property Filter',
            results: 'result(s)',
        },
    },
    es: {
        home: {
            domainSelect: 'Seleccionar Dominio',
            selectContainer: 'Seleccionar Contenedor',
            taxonomy: 'Taxonomia',
            metatypes: 'Clases',
            metatypesDescription: 'Modificar clase y propietarios',
            metatypeRelationships: 'Relaciones',
            metatypeRelationshipsDescription: 'Modificar relaciones entre clases',
            metatypeRelationshipPairs: 'Pares de clase / relación',
            metatypeRelationshipPairsDescription: 'Modificar pares de clase / relación',
            import: 'Importar',
            data: 'Data',
            dataSources: 'Orígenes de datos',
            dataSourcesDescription: 'Configurar orígenes de datos',
            dataExplorer: 'Explorar',
            dataExplorerDescription: 'Datos interactivo',
            dataMapping: 'Mapeo de clase',
            dataMappingDescription: 'Manejar asignaciones entre clases y datos.',
            dataExport: 'Exportar',
            dataExportDescription: 'Manejar exportaciones de dato',
            settings: 'Configuraciones',
            settingsDescription: 'Configuraciones de application',
            dataImports: 'Datos importados',
            dataImportsDescription: 'Manejar datos importados',
            containerAdministration: 'Administracion de contenedores',
            containerUsers: 'Usarios de contenedores',
            containerUsersDescription: 'Manjear usarios de contenedores',
            administration: 'Administracion de applicacion',
            users: 'Usarios',
            usersDescription: 'Manejar usarios',
            containers: 'Contenedores',
            containersDescription: 'Manejar Contenedores',
            language: 'Idioma',
        },
        metatypes: {
            metatypes: 'Metatypes',
            search: 'Search',
            create: 'Create',
        },
        dataSources: {
            create: 'Create',
            formTitle: 'New Data Source',
        },
        login: {
            username: 'Correo Electrónico',
            password: 'Contraseña',
            login: 'Iniciar',
            windows: 'Iniciar con Windows',
        },
        users: {
            title: 'Manage Users',
            newUser: 'New User',
            name: 'Name',
            email: 'Email',
            admin: 'Admin',
            actions: 'Actions',
            password: 'Password',
            confirmPassword: 'Confirm Password',
            assignRole: 'Assign Role',
            role: 'Role',
            users: 'Users',
            containers: 'Containers',
            assignContainerRoles: 'Container Roles',
            editUserTitle: 'Edit User',
        },
    },
};
